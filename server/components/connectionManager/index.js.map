{"version":3,"sources":["components/connectionManager/index.js"],"names":[],"mappings":"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","file":"components/connectionManager/index.js","sourcesContent":["\nvar url = require('url');\n\nclass ConnectionManager {\n\n  constructor(wss, bus) {\n    wss.on('connection', client=>this.onConnect(client));\n    this.eventBus = bus;\n    this.sockets = {};\n\n    this.eventBus.on(this.eventBus.ACCEPT_CLIENT, client => this.onAcceptClient(client))\n    this.eventBus.on(this.eventBus.DISCONNECT_CLIENT, client=>this.onDisconnectClient(client))\n    this.eventBus.on(this.eventBus.SEND_MESSAGE, (client, message)=>this.onSendMessage(client, message))\n  }\n\n  _getSocket(id){\n    return this.sockets[id];\n  }\n\n  onSendMessage(client, message) {\n    if (client && this._getSocket(client.id)) {\n      try {\n        this._getSocket(client.id).send(JSON.stringify(message));\n      } catch (e) {\n        console.log('error due sending message, maybe socket is closed');\n      }\n    }\n  }\n  _getConnectionParams(socket) {\n    let param = {};\n    if (socket && socket.upgradeReq && socket.upgradeReq.url) {\n      var query = url.parse(socket.upgradeReq.url, true).query;\n      if (query) {\n        param = {\n          id: query.id,\n          token: query.token,\n          key: query.key,\n          ip: socket.upgradeReq.socket ? socket.upgradeReq.socket.remoteAddress : null\n        }\n      }\n    }\n    return param\n  }\n  onConnect(socket) {\n    var connectionParam = this._getConnectionParams(socket);\n    console.log('onConnect ', connectionParam)\n\n    if (!connectionParam.id || !connectionParam.token || !connectionParam.key) {\n      socket.send(JSON.stringify({type: 'ERROR', payload: {msg: 'No id, token, or key supplied to websocket server'}}));\n      socket.close();\n      return;\n    }\n    let client = connectionParam;\n    this.sockets[client.id] = socket;\n    this.eventBus.emit(this.eventBus.NEW_CONNECTION, client)\n  }\n\n  onAcceptClient (client) {\n\n    console.log('accept connection')\n    let socket = this._getSocket(client.id);\n    socket.send(JSON.stringify({type: 'OPEN'}));\n    socket.on('close', () => this.eventBus.emit(this.eventBus.SOCKET_CLOSED, client));\n    socket.on('error', (err) => this.eventBus.emit(this.eventBus.SOCKET_ERROR, client, err));\n    socket.on('message', (data) => this.eventBus.emit(this.eventBus.SOCKET_MESSAGE, client, data));\n  };\n\n  onDisconnectClient (client) {\n    this._getSocket(client.id).close();\n    this.sockets[client.id] = null;\n  };\n\n\n}\n\n\nexport default ConnectionManager;\n"],"sourceRoot":"/source/"}