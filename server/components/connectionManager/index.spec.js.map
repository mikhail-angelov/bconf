{"version":3,"sources":["components/connectionManager/index.spec.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAMA,SAAS,mBAAT,EAA8B,YAAY;;AAExC,MAAI,mBAAJ,CAFwC;AAGxC,MAAI,WAAW,qBAAX,CAHoC;AAIxC,MAAM,SAAS,MAAT,CAJkC;AAKxC,MAAI,mBAAJ,CALwC;AAMxC,MAAI,cAAc,EAAd,CANoC;AAOxC,MAAI,KAAK,EAAC,IAAI,YAAC,OAAD,EAAU,SAAV;aAAwB,UAAU,SAAV;KAAxB,EAAV,CAPoC;AAQxC,MAAI,aAAa;AACf,UAAM,MAAM,GAAN,CAAU,UAAC,CAAD,EAAM;AACpB,cAAQ,GAAR,CAAY,WAAZ,EAAyB,CAAzB,EADoB;KAAN,CAAhB;AAGA,WAAO,MAAM,GAAN,EAAP;AACA,QAAI,MAAM,GAAN,CAAU,UAAC,KAAD,EAAQ,EAAR;aAAe,YAAY,KAAZ,IAAqB,EAArB;KAAf,CAAd;AACA,gBAAY,EAAC,KAAK,2BAA2B,MAA3B,GAAoC,sBAApC,EAA4D,QAAQ,EAAC,eAAe,SAAf,EAAT,EAA9E;GANE,CARoC;;AAiBxC,MAAI,aAAa,EAAC,IAAI,MAAJ,EAAY,KAAK,MAAL,EAAa,OAAO,MAAP,EAAe,IAAI,SAAJ,EAAe,QAAQ,UAAR,EAArE,CAjBoC;AAkBxC,SAAO,YAAY;AACjB,cAAU,oBAAmB,EAAnB,EAAuB,QAAvB,CAAV,CADiB;GAAZ,CAAP,CAlBwC;;AAsBxC,KAAG,sBAAH,EAA2B,YAAY;AACrC,YAAQ,MAAR,CAAe,EAAf,CAAkB,OAAlB,CADqC;AAErC,YAAQ,MAAR,CAAe,EAAf,CAAkB,OAAlB,CAFqC;GAAZ,CAA3B,CAtBwC;;AA2BxC,KAAG,iCAAH,EAAsC,UAAU,IAAV,EAAgB;;AAEpD,aAAS,IAAT,CAAc,SAAS,cAAT,EAAyB,UAAC,MAAD,EAAW;;AAEhD,iBAAW,IAAX,CAAgB,KAAhB,GAFgD;AAGhD,aAAO,MAAP,CAAc,EAAd,CAAiB,OAAjB,CAHgD;AAIhD,eAAS,IAAT,CAAc,SAAS,aAAT,EAAwB,MAAtC,EAJgD;AAKhD,iBAAW,IAAX,CAAgB,QAAhB,CAAyB,iBAAzB,EAA4C,MAA5C,CAAmD,IAAnD,CAAwD,IAAxD,CAA6D,UAA7D,CALgD;AAMhD,aANgD;KAAX,CAAvC,CAFoD;;AAWpD,YAAQ,UAAR,EAXoD;GAAhB,CAAtC,CA3BwC;;AA0CxC,KAAG,kCAAH,EAAuC,UAAU,IAAV,EAAgB;AACrD,QAAI,UAAU,MAAV,CADiD;;AAGrD,aAAS,IAAT,CAAc,SAAS,cAAT,EAAyB,UAAC,MAAD,EAAS,IAAT,EAAiB;;AAEtD,cAAQ,GAAR,CAAY,cAAZ,EAFsD;AAGtD,WAAK,MAAL,CAAY,EAAZ,CAAe,KAAf,CAAqB,OAArB,EAHsD;AAItD,aAJsD;KAAjB,CAAvC,CAHqD;;AAUrD,gBAAY,SAAZ,EAAuB,OAAvB,EAVqD;GAAhB,CAAvC,CA1CwC;;AAuDxC,KAAG,sCAAH,EAA2C,YAAY;AACrD,QAAI,UAAU,aAAa,MAAb,GAAsB,WAAtB,GAAoC,MAApC,GAA6C,mBAA7C,CADuC;;AAGrD,eAAW,IAAX,CAAgB,KAAhB,GAHqD;AAIrD,aAAS,IAAT,CAAc,SAAS,YAAT,EAAuB,UAArC,EAAiD,OAAjD,EAJqD;AAKrD,eAAW,IAAX,CAAgB,MAAhB,CAAuB,IAAvB,CAA4B,IAA5B,CAAiC,UAAjC,CALqD;GAAZ,CAA3C,CAvDwC;CAAZ,CAA9B","file":"components/connectionManager/index.spec.js","sourcesContent":["'use strict';\n\n//import app from '../..';\nimport managerFactory  from './index';\nimport eventBusFactory  from '../eventBus/index.js';\n\ndescribe('ConnectionManager', function () {\n\n  let manager;\n  let eventBus = new eventBusFactory();\n  const testId = 'test';\n  let connect;\n  let socketEvent = {};\n  let ws = {on: (message, onConnect) => connect = onConnect};\n  let socketMock = {\n    send: sinon.spy((m)=> {\n      console.log('sending..', m)\n    }),\n    close: sinon.spy(),\n    on: sinon.spy((event, cb) => socketEvent[event] = cb),\n    upgradeReq: {url: 'ws://localhost:80/?id=' + testId + '&token=test&key=test', socket: {remoteAddress: '1.1.1.1'}}\n  };\n\n  var testClient = {id: testId, key: 'test', token: 'test', ip: '1.1.1.1', socket: socketMock};\n  before(function () {\n    manager = new managerFactory(ws, eventBus);\n  });\n\n  it('should begin defined', function () {\n    manager.should.be.defined;\n    connect.should.be.defined;\n  });\n\n  it('should open connection properly', function (done) {\n\n    eventBus.once(eventBus.NEW_CONNECTION, (client)=> {\n\n      socketMock.send.reset();\n      client.should.be.defined;\n      eventBus.emit(eventBus.ACCEPT_CLIENT, client);\n      socketMock.send.withArgs('{\"type\":\"OPEN\"}').should.have.been.calledOnce\n      done();\n    });\n\n    connect(socketMock);\n  });\n\n\n  it('should emit event on new message', function (done) {\n    let message = 'test';\n\n    eventBus.once(eventBus.SOCKET_MESSAGE, (client, data)=> {\n\n      console.log('message sent')\n      data.should.be.equal(message)\n      done();\n    });\n\n    socketEvent['message'](message);\n  });\n\n  it('should send message on message event', function () {\n    let message = '{\"src\":\"' + testId + '\",\"dst\":\"' + testId + '\",\"type\":\"OFFER\"}';\n\n    socketMock.send.reset();\n    eventBus.emit(eventBus.SEND_MESSAGE, testClient, message)\n    socketMock.send.should.have.been.calledOnce\n  });\n\n});\n"],"sourceRoot":"/source/"}