{"version":3,"sources":["app.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAM,gBAAgB,SAAhB;;;AAGN,mBAAS,OAAT,CAAiB,gBAAO,KAAP,CAAa,GAAb,EAAkB,gBAAO,KAAP,CAAa,OAAb,CAAnC;AACA,mBAAS,UAAT,CAAoB,EAApB,CAAuB,OAAvB,EAAgC,UAAS,GAAT,EAAc;AAC5C,UAAQ,KAAR,CAAc,+BAA+B,GAA/B,CAAd,CAD4C;AAE5C,UAAQ,IAAR,CAAa,CAAC,CAAD,CAAb,CAF4C;CAAd,CAAhC;;;AAMA,IAAI,gBAAO,MAAP,EAAe;AAAE,UAAQ,eAAR,EAAF;CAAnB;;AAEA,IAAI,KAAK,EAAL;AACJ,GAAG,QAAH,GAAc,qBAAd;;;AAGA,IAAI,MAAM,wBAAN;AACJ,IAAI,SAAS,eAAK,YAAL,CAAkB,GAAlB,CAAT;AACJ,QAAQ,kBAAR,EAA4B,GAA5B;AACA,QAAQ,UAAR,EAAoB,GAApB;;;AAIA,SAAS,WAAT,GAAuB;AACrB,MAAI,OAAO,OAAO,MAAP,CAAc,gBAAO,IAAP,EAAa,gBAAO,EAAP,EAAW,YAAW;AAC1D,YAAQ,GAAR,CAAY,4CAAZ,EAA0D,gBAAO,IAAP,EAAa,IAAI,GAAJ,CAAQ,KAAR,CAAvE,EAD0D;GAAX,CAA7C;;;AADiB,IAMrB,CAAG,GAAH,GAAS,IAAI,aAAU,MAAV,CAAiB,EAAC,MAAM,aAAN,EAAqB,QAAQ,IAAR,EAA3C,CAAT,CANqB;AAOrB,KAAG,iBAAH,GAAuB,oBAAsB,GAAG,GAAH,EAAQ,GAAG,QAAH,CAArD,CAPqB;AAQrB,KAAG,MAAH,GAAY,oBAAkB,GAAG,QAAH,mBAAlB,iBAAZ,CARqB;AASrB,KAAG,WAAH,GAAiB,0BAAuB,GAAG,QAAH,CAAxC,CATqB;CAAvB;;AAcA,aAAa,WAAb;;;AAGA,OAAO,OAAP,GAAiB;AACf,UADe;AAEf,QAFe;CAAjB","file":"app.js","sourcesContent":["'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport http from 'http';\nimport WebSocket from 'ws';\n\nimport config from './config/environment/index.js';\nimport connectionManager from './components/connectionManager/index.js';\nimport eventBusFactory from './components/eventBus/index.js'\nimport session  from './components/store/session';\nimport peerjsFactory from './components/peerjs/index.js'\nimport User from './api/user/user.model';\nimport robotMasterFactory from './components/robots/robotMaster.js';\n\nconst webSocketPath = '/peerjs'; //to config\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n  console.error('MongoDB connection error: ' + err);\n  process.exit(-1);\n});\n\n// Populate databases with sample data\nif (config.seedDB) { require('./config/seed'); }\n\nvar di = {};\ndi.eventBus = new eventBusFactory();\n\n// Setup server\nvar app = express();\nvar server = http.createServer(app);\nrequire('./config/express')(app);\nrequire('./routes')(app);\n\n\n// Start server\nfunction startServer() {\n  let serv = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n\n  // Create WebSocket server\n  di.wss = new WebSocket.Server({path: webSocketPath, server: serv});\n  di.connectionManager = new connectionManager(di.wss, di.eventBus);\n  di.peerjs = new peerjsFactory(di.eventBus, session, User);\n  di.robotMaster = new robotMasterFactory(di.eventBus);\n\n\n}\n\nsetImmediate(startServer);\n\n// Expose app\nmodule.exports = {\n  app,\n  di\n};\n"],"sourceRoot":"/source/"}